{
	"id": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
	"name": "Nanocloud Tests",
	"description": "",
	"order": [],
	"folders": [
		{
			"id": "a3df8c06-fba9-7f23-7846-f50e411a5897",
			"name": "[005]INIT",
			"description": "",
			"order": [
				"c515b01a-fd64-696a-8d42-db5c90649f51",
				"6a101976-51e2-021d-ecfd-034ae6fffc79"
			],
			"owner": "275951"
		},
		{
			"id": "83180e32-e98d-ec7d-0bf6-a8c41f82444a",
			"name": "[010]USERS",
			"description": "Test Requests for users module",
			"order": [
				"944b5e1a-b3f8-3e73-78ed-d504c0fc0ee2",
				"37d3eae3-0ee5-4505-0a3f-b40f7b437a53",
				"359d125b-d3da-a8b8-0958-423b99ecbda0",
				"a04cb931-2527-d3b5-7ffe-ad626f5270ef",
				"88416725-9562-187c-9661-2a6a5eeb16a5",
				"6ac8a38f-7ed2-173b-403e-95084b1c1708",
				"8d8bd680-51f0-1023-9795-e4769867e51c",
				"e3447161-7c34-b589-9909-69cf3b0cc444",
				"260a22ab-b1f1-6517-ead6-87c3e8659ebf",
				"fbcebf88-c1b6-34e5-8db1-569bbf9527d9",
				"81f92123-f2cc-24c5-ed72-3d1958118e1d",
				"c626c220-6043-e432-d3f7-dce9dc6e080a",
				"95aa05d2-1569-eab8-30f3-bafd942d2cc7",
				"429e044f-8646-d743-f5ba-ad248112915e",
				"22ca5a1c-699a-94f6-62c1-5de92b49a934",
				"0287141e-d996-87fc-9224-c8e1fee2885f"
			],
			"owner": "275951",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5"
		},
		{
			"id": "f38d42e5-9f67-baa9-9678-aaea95f18293",
			"name": "[020]LDAP",
			"description": "",
			"order": [
				"90513f4e-af38-ab7a-3aa0-1fed95f702ea",
				"b6a9bdb1-1a4e-d5b4-1294-ae6305a6014e",
				"fa12865a-9b78-c286-6459-a9c218f772d6",
				"93f34880-4fb4-8b4a-2bb9-85d06b677512",
				"6092a6b1-209f-ac2e-98bd-7e94059d7a49",
				"957c5206-0bb4-55e9-a356-ca963d63aa46",
				"a471b02d-2e93-65a2-046c-8a5e299b68ab",
				"fe997118-6e5b-6c37-a7fe-c0e9c8558798"
			],
			"owner": "275951",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5"
		},
		{
			"id": "eed9f9b0-ab55-2137-7ec5-5fc9413e16fe",
			"name": "[030]HISTORY",
			"description": "",
			"order": [
				"426124b6-9c77-cf3b-5865-d269376f6595",
				"4d09ac55-5fb7-5a0b-cd0f-4f374c0c0af3",
				"7178a58c-895f-2e5d-7fc1-b7afea57adea",
				"36998e9f-d157-e49e-a97b-b3bfa4b2a1ef"
			],
			"owner": "275951",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5"
		},
		{
			"id": "954c3087-ed15-aa5f-700b-5599bc91c3da",
			"name": "[040]APPS",
			"description": "Test request for apps module",
			"order": [
				"74465a6e-0f41-6ccf-5f24-d767d26eba86",
				"7e270445-d65b-fe46-a10c-c11cce566214",
				"04b9aa34-5ba4-674b-fd70-a28ad905cadd",
				"1fc46dc0-b13d-f467-5f04-2ef5456adc77",
				"96156407-0e4c-082d-d545-83e585123e05",
				"bdebdd03-fd89-a3ab-5b3a-3bf34d8330c8",
				"6ee9a183-56cd-8685-4307-dc04b42895b7"
			],
			"owner": "275951"
		}
	],
	"timestamp": 0,
	"owner": "257176",
	"remoteLink": "https://www.getpostman.com/collections/4eedde5dbbb52d369311",
	"public": false,
	"requests": [
		{
			"id": "0287141e-d996-87fc-9224-c8e1fee2885f",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865897025,
			"name": "Delete User for cleanup",
			"description": "Deletes the specified user from the database.",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "04b9aa34-5ba4-674b-fd70-a28ad905cadd",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1453304925066,
			"name": "Publish a valid application",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": "{\n    \"path\": \"C:/Windows/System32/calc.exe\"\n}"
		},
		{
			"id": "1fc46dc0-b13d-f467-5f04-2ef5456adc77",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Hostname is present\"] = (typeof res[0].Hostname) === \"string\";\ntests[\"Hostname has the correct value\"] = res[0].Hostname === \"iaas-module\";\ntests[\"Port is present\"] = (typeof res[0].Port) === \"string\";\ntests[\"Username is present\"] = (typeof res[0].Username) === \"string\";\ntests[\"Password is present\"] = (typeof res[0].Password) === \"string\";\ntests[\"RemoteApp is present\"] = (typeof res[0].RemoteApp) === \"string\";\ntests[\"RemoteApp has the correct value\"] = res[0].RemoteApp === \"||calc\";\ntests[\"ConnectionName is present\"] = (typeof res[0].ConnectionName) === \"string\";\ntests[\"ConnectionName has the correct value\"] = res[0].ConnectionName === \"calc_admin@nanocloud.com\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1453311815373,
			"name": "List apps",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "22ca5a1c-699a-94f6-62c1-5de92b49a934",
			"headers": "Content-Type: application/json\nAuthorization: Basic {{_OAUTH_CLIENT_HTTP_BASIC}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/oauth/token",
			"preRequestScript": "var env = {\n    PROTOCOL: \"http\",\n    HOST: \"127.0.0.1\",\n    ADMIN_USERNAME: \"admin@nanocloud.com\",\n    ADMIN_PASSWORD: \"admin\",\n    APP_KEY: \"9405fb6b0e59d2997e3c777a22d8f0e617a9f5b36b6565c7579e5be6deb8f7ae\",\n    APP_SECRET: \"9050d67c2be0943f2c63507052ddedb3ae34a30e39bbbbdab241c93f8b5cf341\"\n};\n\nfor (var key in env) {\n    var value = postman.getEnvironmentVariable(key);\n    if (typeof value === \"undefined\") {\n        postman.setEnvironmentVariable(key, env[key]);\n    }\n}\n\nvar appKey = postman.getEnvironmentVariable(\"APP_KEY\");\nvar appSecret = postman.getEnvironmentVariable(\"APP_SECRET\");\n\n/*\n * Use this technique instead of Basic auth to prevent basic base64 key\n * to be saved.\n */\npostman.setEnvironmentVariable(\"_OAUTH_CLIENT_HTTP_BASIC\", btoa(appKey + \":\" + appSecret))",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 401\"] = responseCode.code === 401;\n \nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = typeof(res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452784085473,
			"name": "Login with valid user but wrong password",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"isFromCollection": true,
			"collectionRequestId": "22ca5a1c-699a-94f6-62c1-5de92b49a934",
			"folder": "83180e32-e98d-ec7d-0bf6-a8c41f82444a",
			"rawModeData": "{\n    \"username\": \"{{TEST_USER_EMAIL}}\",\n    \"password\": \"inValidP4ssword2!\",\n    \"grant_type\": \"password\"\n}"
		},
		{
			"id": "260a22ab-b1f1-6517-ead6-87c3e8659ebf",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n \nvar res = JSON.parse(responseBody);\ntests[\"Id is present\"] = (typeof res.Id) === \"undefined\";\ntests[\"Email is present\"] = (typeof res.Email) === \"undefined\";\ntests[\"Activated is present\"] = (typeof res.Activated) === \"undefined\";\ntests[\"IsAdmin is present\"] = (typeof res.IsAdmin) === \"undefined\";\ntests[\"FirstName is present\"] = (typeof res.FirstName) === \"undefined\";\ntests[\"LastName is present\"] = (typeof res.LastName) === \"undefined\";\ntests[\"Sam is present\"] = (typeof res.Sam) === \"undefined\";\ntests[\"WindowsPassword is present\"] = (typeof res.WindowsPassword) === \"undefined\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865921841,
			"name": "Get User Infos of deleted user",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "359d125b-d3da-a8b8-0958-423b99ecbda0",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Email of admin if present\"] = (typeof res[0].Email) === \"string\";\ntests[\"Email of admin has the right value\"] = res[0].Email === postman.getEnvironmentVariable(\"ADMIN_USERNAME\");\ntests[\"Activated field of admin if present\"] = (typeof res[0].Activated) === \"boolean\";\ntests[\"Admin is activated\"] = res[0].Activated === true;\ntests[\"IsAdmin field of admin if present\"] = (typeof res[0].IsAdmin) === \"boolean\";\ntests[\"Admin is really the admin\"] = res[0].IsAdmin === true;\ntests[\"Id of previsoulsy created user is present\"] = (typeof res[1].Id) === \"string\";\ntests[\"Email of previsoulsy created user is present\"] = (typeof res[1].Email) === \"string\";\ntests[\"Email of previsoulsy created user has the right value\"] = res[1].Email === postman.getEnvironmentVariable(\"TEST_USER_EMAIL\");\ntests[\"Activated of previsoulsy created user is present\"] = (typeof res[1].Activated) === \"boolean\";\ntests[\"Activated of previsoulsy created user has the right value\"] = res[1].Activated === true;\ntests[\"IsAdmin of previsoulsy created user is present\"] = (typeof res[1].IsAdmin) === \"boolean\";\ntests[\"IsAdmin of previsoulsy created user has the right value\"] = res[1].IsAdmin === false;\ntests[\"FirstName of previsoulsy created user is present\"] = (typeof res[1].FirstName) === \"string\";\ntests[\"FirstName of previsoulsy created user has the right value\"] = res[1].FirstName === postman.getEnvironmentVariable(\"TEST_USER_FIRSTNAME\");\ntests[\"LastName of previsoulsy created user is present\"] = (typeof res[1].LastName) === \"string\";\ntests[\"LastName of previsoulsy created user has the right value\"] = res[1].LastName === postman.getEnvironmentVariable(\"TEST_USER_LASTNAME\");\ntests[\"Sam of previsoulsy created user is present\"] = (typeof res[1].Sam) === \"string\";\ntests[\"WindowsPassword of previsoulsy created user is present\"] = (typeof res[1].WindowsPassword) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452701741119,
			"name": "List Users",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "359d125b-d3da-a8b8-0958-423b99ecbda0",
			"folder": "83180e32-e98d-ec7d-0bf6-a8c41f82444a"
		},
		{
			"id": "36998e9f-d157-e49e-a97b-b3bfa4b2a1ef",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/history",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = (typeof res.success) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865796578,
			"name": "Add an invalid history",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": "{\n\n}"
		},
		{
			"id": "37d3eae3-0ee5-4505-0a3f-b40f7b437a53",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n \nvar res = JSON.parse(responseBody);\ntests[\"Id is present\"] = (typeof res.Id) === \"string\";\ntests[\"Email is present\"] = (typeof res.Email) === \"string\";\ntests[\"Email has the right value\"] = res.Email === postman.getEnvironmentVariable(\"TEST_USER_EMAIL\");\ntests[\"Activated is present\"] = (typeof res.Activated) === \"boolean\";\ntests[\"Activated has the right value\"] = res.Activated === true;\ntests[\"IsAdmin is present\"] = (typeof res.IsAdmin) === \"boolean\";\ntests[\"IsAdmin has the right value\"] = res.IsAdmin === false;\ntests[\"FirstName is present\"] = (typeof res.FirstName) === \"string\";\ntests[\"FirstName has the right value\"] = res.FirstName === postman.getEnvironmentVariable(\"TEST_USER_FIRSTNAME\");\ntests[\"LastName is present\"] = (typeof res.LastName) === \"string\";\ntests[\"LastName has the right value\"] = res.LastName === postman.getEnvironmentVariable(\"TEST_USER_LASTNAME\");\ntests[\"Sam is present\"] = (typeof res.Sam) === \"string\";\ntests[\"WindowsPassword is present\"] = (typeof res.WindowsPassword) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865951210,
			"name": "Get User Infos",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"folder": "83180e32-e98d-ec7d-0bf6-a8c41f82444a",
			"isFromCollection": true,
			"collectionRequestId": "42dbd0ac-c44c-5a10-48e1-ef75f652851c"
		},
		{
			"id": "426124b6-9c77-cf3b-5865-d269376f6595",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/history",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865845714,
			"name": "List empty history entries",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "429e044f-8646-d743-f5ba-ad248112915e",
			"headers": "Content-Type: application/json\nAuthorization: Basic {{_OAUTH_CLIENT_HTTP_BASIC}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/oauth/token",
			"preRequestScript": "var env = {\n    PROTOCOL: \"http\",\n    HOST: \"127.0.0.1\",\n    ADMIN_USERNAME: \"admin@nanocloud.com\",\n    ADMIN_PASSWORD: \"admin\",\n    APP_KEY: \"9405fb6b0e59d2997e3c777a22d8f0e617a9f5b36b6565c7579e5be6deb8f7ae\",\n    APP_SECRET: \"9050d67c2be0943f2c63507052ddedb3ae34a30e39bbbbdab241c93f8b5cf341\"\n};\n\nfor (var key in env) {\n    var value = postman.getEnvironmentVariable(key);\n    if (typeof value === \"undefined\") {\n        postman.setEnvironmentVariable(key, env[key]);\n    }\n}\n\nvar appKey = postman.getEnvironmentVariable(\"APP_KEY\");\nvar appSecret = postman.getEnvironmentVariable(\"APP_SECRET\");\n\n/*\n * Use this technique instead of Basic auth to prevent basic base64 key\n * to be saved.\n */\npostman.setEnvironmentVariable(\"_OAUTH_CLIENT_HTTP_BASIC\", btoa(appKey + \":\" + appSecret))",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 401\"] = responseCode.code === 401;\n \nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = typeof(res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452784173309,
			"name": "Login with unknown user",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"isFromCollection": true,
			"collectionRequestId": "429e044f-8646-d743-f5ba-ad248112915e",
			"folder": "83180e32-e98d-ec7d-0bf6-a8c41f82444a",
			"rawModeData": "{\n    \"username\": \"invalid@mail.com\",\n    \"password\": \"{{TEST_USER_PASSWORD}}\",\n    \"grant_type\": \"password\"\n}"
		},
		{
			"id": "4d09ac55-5fb7-5a0b-cd0f-4f374c0c0af3",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/history",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865809364,
			"name": "Add a valid history entry",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": "{\n    \"UserId\": \"{{TEST_USER_ID}}\",\n    \"ConnectionId\": \"testConnectionId\",\n    \"StartDate\": \"monday\",\n    \"EndDate\": \"tuesday\"\n}"
		},
		{
			"id": "6092a6b1-209f-ac2e-98bd-7e94059d7a49",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/ldap/users/{{TEST_USER_ID}}/disable",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865871697,
			"name": "Disable a valid user",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "6a101976-51e2-021d-ecfd-034ae6fffc79",
			"headers": "Content-Type: application/json\nAuthorization: Basic {{_OAUTH_CLIENT_HTTP_BASIC}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/oauth/token",
			"preRequestScript": "var appKey = postman.getEnvironmentVariable(\"APP_KEY\");\nvar appSecret = postman.getEnvironmentVariable(\"APP_SECRET\");\n\n/*\n * Use this technique instead of Basic auth to prevent basic base64 key\n * to be saved.\n */\npostman.setEnvironmentVariable(\"_OAUTH_CLIENT_HTTP_BASIC\", btoa(appKey + \":\" + appSecret))",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n \nvar res = JSON.parse(responseBody);\ntests[\"Token type is \\\"Bearer\\\"\"] = res.type === \"Bearer\";\ntests[\"Token is present\"] = (typeof res.access_token) === \"string\";\n\npostman.setEnvironmentVariable(\"ACCESS_TOKEN\", res.access_token);",
			"currentHelper": "normal",
			"helperAttributes": "{}",
			"time": 1452694769771,
			"name": "Admin Login",
			"description": "Get OAuth token for admin user",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"descriptionFormat": null,
			"isFromCollection": true,
			"collectionRequestId": "a4fd4eed-e53a-70a2-f0ac-90e4dc2e57a0",
			"folder": "a3df8c06-fba9-7f23-7846-f50e411a5897",
			"rawModeData": "{\n    \"username\": \"{{ADMIN_USERNAME}}\",\n    \"password\": \"{{ADMIN_PASSWORD}}\",\n    \"grant_type\": \"password\"\n}"
		},
		{
			"id": "6ac8a38f-7ed2-173b-403e-95084b1c1708",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}/disable",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865935733,
			"name": "Disable the user",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "6ee9a183-56cd-8685-4307-dc04b42895b7",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n\nvar res = JSON.parse(responseBody);\ntests[\"Error field is present\"] = (typeof res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1453312200132,
			"name": "Publish an application with no name",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": "{\n    \"path\": \"  \"\n}"
		},
		{
			"id": "7178a58c-895f-2e5d-7fc1-b7afea57adea",
			"headers": "Content-Tyoe: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/history",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452864766434,
			"name": "List history entries",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "74465a6e-0f41-6ccf-5f24-d767d26eba86",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452866359408,
			"name": "List empty apps list",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "7e270445-d65b-fe46-a10c-c11cce566214",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/me",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452867143837,
			"name": "List empty apps list for sam",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "81f92123-f2cc-24c5-ed72-3d1958118e1d",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 409\"] = responseCode.code === 409;\n \nvar res = JSON.parse(responseBody);\ntests[\"Error is returned\"] = (typeof res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452780938441,
			"name": "Add the same user again",
			"description": "Add a user to the database and contact possible other modules so they can add the user too.",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "81f92123-f2cc-24c5-ed72-3d1958118e1d",
			"folder": "83180e32-e98d-ec7d-0bf6-a8c41f82444a",
			"rawModeData": "{         \n   \"FirstName\": \"{{TEST_USER_FIRSTNAME}}\",\n   \"LastName\": \"{{TEST_USER_LASTNAME}}\",  \n   \"Email\": \"{{TEST_USER_EMAIL}}\",\n   \"Password\": \"{{TEST_USER_PASSWORD}}\"\n}"
		},
		{
			"id": "88416725-9562-187c-9661-2a6a5eeb16a5",
			"headers": "Content-Type: application/json\nAuthorization: Basic {{_OAUTH_CLIENT_HTTP_BASIC}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/oauth/token",
			"preRequestScript": "var env = {\n    PROTOCOL: \"http\",\n    HOST: \"127.0.0.1\",\n    ADMIN_USERNAME: \"admin@nanocloud.com\",\n    ADMIN_PASSWORD: \"admin\",\n    APP_KEY: \"9405fb6b0e59d2997e3c777a22d8f0e617a9f5b36b6565c7579e5be6deb8f7ae\",\n    APP_SECRET: \"9050d67c2be0943f2c63507052ddedb3ae34a30e39bbbbdab241c93f8b5cf341\"\n};\n\nfor (var key in env) {\n    var value = postman.getEnvironmentVariable(key);\n    if (typeof value === \"undefined\") {\n        postman.setEnvironmentVariable(key, env[key]);\n    }\n}\n\nvar appKey = postman.getEnvironmentVariable(\"APP_KEY\");\nvar appSecret = postman.getEnvironmentVariable(\"APP_SECRET\");\n\n/*\n * Use this technique instead of Basic auth to prevent basic base64 key\n * to be saved.\n */\npostman.setEnvironmentVariable(\"_OAUTH_CLIENT_HTTP_BASIC\", btoa(appKey + \":\" + appSecret))",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n \nvar res = JSON.parse(responseBody);\ntests[\"Token type is \\\"Bearer\\\"\"] = res.type === \"Bearer\";\ntests[\"Token is present\"] = (typeof res.access_token) === \"string\";\n\npostman.setEnvironmentVariable(\"TEST_USER_ACCES_TOKEN\", res.access_token);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452702244903,
			"name": "Login with new password",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"isFromCollection": true,
			"collectionRequestId": "88416725-9562-187c-9661-2a6a5eeb16a5",
			"folder": "83180e32-e98d-ec7d-0bf6-a8c41f82444a",
			"rawModeData": "{\n    \"username\": \"{{TEST_USER_EMAIL}}\",\n    \"password\": \"{{TEST_USER_NEWPASSWORD}}\",\n    \"grant_type\": \"password\"\n}"
		},
		{
			"id": "8d8bd680-51f0-1023-9795-e4769867e51c",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n \nvar res = JSON.parse(responseBody);\ntests[\"Id is present\"] = (typeof res.Id) === \"string\";\ntests[\"Email is present\"] = (typeof res.Email) === \"string\";\ntests[\"Email has the right value\"] = res.Email === postman.getEnvironmentVariable(\"TEST_USER_EMAIL\");\ntests[\"Activated is present\"] = (typeof res.Activated) === \"boolean\";\ntests[\"Activated has the right value\"] = res.Activated === false;\ntests[\"IsAdmin is present\"] = (typeof res.IsAdmin) === \"boolean\";\ntests[\"IsAdmin has the right value\"] = res.IsAdmin === false;\ntests[\"FirstName is present\"] = (typeof res.FirstName) === \"string\";\ntests[\"FirstName has the right value\"] = res.FirstName === postman.getEnvironmentVariable(\"TEST_USER_FIRSTNAME\");\ntests[\"LastName is present\"] = (typeof res.LastName) === \"string\";\ntests[\"LastName has the right value\"] = res.LastName === postman.getEnvironmentVariable(\"TEST_USER_LASTNAME\");\ntests[\"Sam is present\"] = (typeof res.Sam) === \"string\";\ntests[\"WindowsPassword is present\"] = (typeof res.WindowsPassword) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865930586,
			"name": "Get User Infos to verify if he is disabled",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "90513f4e-af38-ab7a-3aa0-1fed95f702ea",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/ldap/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n \nvar res = JSON.parse(responseBody);\ntests[\"sam is present\"] = (typeof res.sam) === \"string\";\n\npostman.setEnvironmentVariable(\"TEST_USER_SAM\", res.Id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865892098,
			"name": "Add ldap user",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": "{\n    \"UserEmail\": \"{{TEST_USER_ID}}\",\n    \"Password\": \"{{TEST_USER_PASSWORD}}\"\n}"
		},
		{
			"id": "93f34880-4fb4-8b4a-2bb9-85d06b677512",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/ldap/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Number of users is present\"] = (typeof res.Count) === \"number\";\ntests[\"There is the correct nukber of users\"] = res.Count === 2;\ntests[\"List of users is present\"] = (typeof res.Users) === \"object\";\ntests[\"CN of created user is present\"] = (typeof res.Users[0][\"cn\"]) === \"string\";\ntests[\"CN of created user has the correct value\"] = res.Users[0][\"cn\"] === \"1\";\ntests[\"DN of created user is present\"] = (typeof res.Users[0][\"dn\"]) === \"string\";\ntests[\"DN of created user has the correct value\"] = res.Users[0][\"dn\"] === \"CN=1,OU=NanocloudUsers,DC=intra,DC=localdomain,DC=com\";\ntests[\"Email of created user is present\"] = (typeof res.Users[0][\"mail\"]) === \"string\";\ntests[\"Email of created user has the correct value\"] = res.Users[0][\"mail\"] === postman.getEnvironmentVariable(\"TEST_USER_ID\");\ntests[\"SAM of created user is present\"] = (typeof res.Users[0][\"samaccountname\"]) === \"string\";\ntests[\"Status of created user is present\"] = (typeof res.Users[0][\"status\"]) === \"string\";\ntests[\"Status of created user is enabled\"] = res.Users[0][\"status\"] === \"Enabled\";\ntests[\"User account control of created user is present\"] = (typeof res.Users[0][\"useraccountcontrol\"]) === \"string\";\ntests[\"User account control of created user is 512\"] = res.Users[0][\"useraccountcontrol\"] === \"512\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1453111381865,
			"name": "List ldap users",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "944b5e1a-b3f8-3e73-78ed-d504c0fc0ee2",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 201\"] = responseCode.code === 201;\n \nvar res = JSON.parse(responseBody);\ntests[\"Id is present\"] = (typeof res.Id) === \"string\";\n\npostman.setEnvironmentVariable(\"TEST_USER_ID\", res.Id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452848101950,
			"name": "Add a valid User",
			"description": "Add a user to the database and contact possible other modules so they can add the user too.",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "0604d5f4-a87f-5b6e-8b9f-9179be672247",
			"folder": "83180e32-e98d-ec7d-0bf6-a8c41f82444a",
			"rawModeData": "{         \n   \"FirstName\": \"{{TEST_USER_FIRSTNAME}}\",\n   \"LastName\": \"{{TEST_USER_LASTNAME}}\",  \n   \"Email\": \"{{TEST_USER_EMAIL}}\",\n   \"Password\": \"{{TEST_USER_PASSWORD}}\"\n}"
		},
		{
			"id": "957c5206-0bb4-55e9-a356-ca963d63aa46",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/ldap/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n \nvar res = JSON.parse(responseBody);\ntests[\"error is present\"] = (typeof res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865863915,
			"name": "Add ldap user with invalid password",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": "{\n    \"UserEmail\": \"{{TEST_USER_EMAIL}}\",\n    \"Password\": \"INVALID_PASSWORD\"\n}"
		},
		{
			"id": "95aa05d2-1569-eab8-30f3-bafd942d2cc7",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}/disable",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = (typeof res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865906018,
			"name": "Disable non-existing user",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "96156407-0e4c-082d-d545-83e585123e05",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps/me",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452867143837,
			"name": "List apps list for sam",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"folder": "954c3087-ed15-aa5f-700b-5599bc91c3da"
		},
		{
			"id": "a04cb931-2527-d3b5-7ffe-ad626f5270ef",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865944098,
			"name": "Change Password with another valid one",
			"description": "Changes the password of the specified user.",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": "{\n    \"Password\": \"{{TEST_USER_NEWPASSWORD}}\"\n}"
		},
		{
			"id": "a471b02d-2e93-65a2-046c-8a5e299b68ab",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/ldap/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n \nvar res = JSON.parse(responseBody);\ntests[\"error is present\"] = (typeof res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865858538,
			"name": "Add ldap user with no body",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "b6a9bdb1-1a4e-d5b4-1294-ae6305a6014e",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/ldap/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n \nvar res = JSON.parse(responseBody);\ntests[\"error is present\"] = (typeof res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452853814752,
			"name": "Add ldap user with no email",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": "{\n    \"Password\": \"{{TEST_USER_PASSWORD}}\"\n}"
		},
		{
			"id": "bdebdd03-fd89-a3ab-5b3a-3bf34d8330c8",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/apps",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1453312118528,
			"name": "Publish an invalid application",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": "{\n    \"path\": \"C:/Windows/System32/calcoulala.exe\"\n}"
		},
		{
			"id": "c515b01a-fd64-696a-8d42-db5c90649f51",
			"headers": "",
			"url": "{{PROTOCOL}}://{{HOST}}/",
			"preRequestScript": "function initEnv() {\n    var env = {\n        PROTOCOL: \"https\",\n        HOST: \"127.0.0.1\",\n        ADMIN_USERNAME: \"admin@nanocloud.com\",\n        ADMIN_PASSWORD: \"admin\",\n        APP_KEY: \"9405fb6b0e59d2997e3c777a22d8f0e617a9f5b36b6565c7579e5be6deb8f7ae\",\n        APP_SECRET: \"9050d67c2be0943f2c63507052ddedb3ae34a30e39bbbbdab241c93f8b5cf341\",\n        TEST_USER_FIRSTNAME: \"karl\",\n        TEST_USER_LASTNAME: \"kool\",\n        TEST_USER_PASSWORD: \"Nano123+\",\n        TEST_USER_NEW_PASSWORD: \"Juju123+\",\n        TEST_USER_EMAIL: \"karkool@mail.com\",\n    };\n    \n    for (var key in env) {\n        var value = postman.getEnvironmentVariable(key);\n        if (typeof value === \"undefined\") {\n            postman.setEnvironmentVariable(key, env[key]);\n        }\n    }\n}\n\ninitEnv();\n\nfunction init() {\n    var checkUnderscoreCase = function(obj) {\n        for (var key in obj) {\n            if (!/^[a-z_]*$/.test(key)) {\n                return false;\n            }\n            \n            if (typeof obj[key] === \"object\") {\n                if (!checkUnderscoreCase(obj[key])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    \n   \n   \n    if (tests[\"Reponse Content-Type is present\"] = !!postman.getResponseHeader('Content-Type')) {\n        tests[\"Content-Type type is JSON\"] = postman.getResponseHeader('Content-Type').split(\";\")[0] === \"application/json\";\n    } else {\n        tests[\"Content-Type type is JSON\"] = false;\n    }\n    \n    if (tests[\"Reponse Content-Length is present\"] = !!postman.getResponseHeader('Content-Length')) {\n        tests[\"Response is not empty\"] = parseInt(responseHeaders['Content-Length'], 10) > 0;\n    } else {\n        tests[\"Response is not empty\"] = false;\n    }\n    \n    var res;\n    \n   try {\n        res = JSON.parse(responseBody);\n        tests[\"JSON is valid\"] = true;\n    } catch (err) {\n        tests[\"JSON is valid\"] = false;\n    }\n    tests[\"Response is a JSON object\"] = (typeof res === \"object\" && res !== null);\n    \n    //if (tests[\"Response is a JSON object\"] = (typeof res === \"object\")) {\n    //    tests[\"JSON notation is underscore case\"] = checkUnderscoreCase(res);\n    //}\n    \n    // return false is any of the tests failed\n    return _.values(tests).indexOf(false) === -1;\n}\n\npostman.setEnvironmentVariable(\"__init__\", init.toString());",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"API is reachable\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865455654,
			"name": "Init",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5"
		},
		{
			"id": "c626c220-6043-e432-d3f7-dce9dc6e080a",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/invalidUUID",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 404\"] = responseCode.code === 404;\n\nvar res = JSON.parse(responseBody);\ntests[\"error field is present\"] = (typeof res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865912332,
			"name": "Delete non-existing user",
			"description": "Deletes the specified user from the database.",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "e3447161-7c34-b589-9909-69cf3b0cc444",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users/{{TEST_USER_ID}}",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865926657,
			"name": "Delete User",
			"description": "Deletes the specified user from the database.",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		},
		{
			"id": "fa12865a-9b78-c286-6459-a9c218f772d6",
			"headers": "Authorization: Bearer {{ACCESS_TOKEN}}\nContent-Type: application/json\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/ldap/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 400\"] = responseCode.code === 400;\n \nvar res = JSON.parse(responseBody);\ntests[\"error is present\"] = (typeof res.error) === \"string\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865884241,
			"name": "Add ldap user with no password",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"rawModeData": "{\n    \"UserEmail\": \"{{TEST_USER_EMAIL}}\"\n}"
		},
		{
			"id": "fbcebf88-c1b6-34e5-8db1-569bbf9527d9",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/users",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n \nvar res = JSON.parse(responseBody);\ntests[\"Id is present\"] = (typeof res.Id) === \"string\";\n\npostman.setEnvironmentVariable(\"TEST_USER_ID\", res.Id);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452700355030,
			"name": "Add a valid User",
			"description": "Add a user to the database and contact possible other modules so they can add the user too.",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "fbcebf88-c1b6-34e5-8db1-569bbf9527d9",
			"folder": "83180e32-e98d-ec7d-0bf6-a8c41f82444a",
			"rawModeData": "{         \n   \"FirstName\": \"{{TEST_USER_FIRSTNAME}}\",\n   \"LastName\": \"{{TEST_USER_LASTNAME}}\",  \n   \"Email\": \"{{TEST_USER_EMAIL}}\",\n   \"Password\": \"{{TEST_USER_PASSWORD}}\"\n}"
		},
		{
			"id": "fe997118-6e5b-6c37-a7fe-c0e9c8558798",
			"headers": "Content-Type: application/json\nAuthorization: Bearer {{ACCESS_TOKEN}}\n",
			"url": "{{PROTOCOL}}://{{HOST}}/api/ldap/users/UNKNOWN_USER/disable",
			"preRequestScript": "",
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "params",
			"version": 2,
			"tests": "if (!eval(postman.getEnvironmentVariable(\"__init__\")) && !init()) return tests;\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar res = JSON.parse(responseBody);\ntests[\"Success field is present\"] = (typeof res.success) === \"boolean\";\ntests[\"Operation succeeded\"] = res.success === true;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1452865851201,
			"name": "Disable an unknown user",
			"description": "",
			"collectionId": "519b7eb9-1ff1-c26b-d4c3-f346e69c01f5",
			"responses": []
		}
	]
}